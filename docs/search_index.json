[
["index.html", "R Markdown Crash Course 1 Preface", " R Markdown Crash Course Zachary M. Smith 2020-03-02 1 Preface This document was developed for a workshop that I led at the 2020 Northeast Aquatic Biologists (NABs) conference. If you identify any issues or have any questions, please direct these questions to the GitHub issues page associated with the GitHub repository for this document (https://github.com/zsmith27/rmarkdown_crash-course/issues). "],
["preparation-for-workshop.html", "2 Preparation for Workshop 2.1 Install R and R Studio 2.2 Updating Software and Packages", " 2 Preparation for Workshop Please follow the instructions in this section prior to attending the 2020 NABs conference. 2.1 Install R and R Studio Please install R and R Studio by following the links below. Software Link R https://cran.r-project.org/bin/windows/base/ R Studio https://www.rstudio.com/products/rstudio/download/#download 2.2 Updating Software and Packages 2.2.1 R For Windows Operating Systems, run the following code in the RGui, NOT in R Studio. The RGui should be installed when you install R. On my Windows machine, I access RGui by clicking on the R program file– my current file name is “R x64 3.6.2”. Once you have the RGui open, copy and paste the R code below into the R Console window. Make sure R Studio is closed before running this code within the RGui. Hit enter once to install the installr package. Hit enter a second time to run the installer package function updateR() and follow the instructions. This code was copied from: https://www.r-statistics.com/2013/03/updating-r-from-r-on-windows-using-the-installr-package/). # installing/loading the package: if(!require(installr)) { install.packages(&quot;installr&quot;); require(installr) } #load / install+load installr # using the package: updateR() 2.2.2 R Studio Open R Studio Click on “Help” on the toolbar Click on “Check for Updates” Follow instructions 2.2.3 R-Packages Open R Studio Click on “Tools” on the toolbar Click on “Check for Package Updates…” Follow instructions 2.2.3.1 Packages for the Workshop Please run the following code within R Studio to make sure you have all of necessary packages for this workshop installed. Open R Studio Copy the following code package.vec &lt;- c(&quot;tidyverse&quot;, &quot;lubridate&quot;, &quot;knitr&quot;, &quot;rmarkdown&quot;, &quot;markdown&quot;, &quot;bookdown&quot;, &quot;caTools&quot;, &quot;bitops&quot;, &quot;DT&quot;, &quot;leaflet&quot;, &quot;shiny&quot;, &quot;jsonlite&quot;, &quot;plotly&quot;, &quot;data.table&quot;, &quot;rprojroot&quot;, &quot;viridis&quot;) install.packages(package.vec) Paste the code into the Console within R Studio Hit Enter If prompted with “Do you want to restart R prior to installing?”, select “Yes” If prompted again then select “No” The packages should begin to install. This may take some time. "],
["overview.html", "3 Overview 3.1 Agenda 3.2 Resources", " 3 Overview A large portion of report writing is often consumed by tedious edits and a disjunct workflow. The R-package, R markdown, provides a centralized workflow and reproducible framework, allowing you to focus your time and energy on the content of the report. This workshop offers you hands-on experience developing reports with R markdown and is intended for individuals with at least a basic understanding of the statistical programming language, R. You will learn basic markdown syntax, formatting tips, how to compile your report as several document types (e.g., HTML, MS Word, and PDF), how to automate the production of tables and figures, and how to configure a report template that can be used automate the production of many reports. There is time dedicated at the end of the workshop for you to bring your own data set and begin developing an R markdown document using lessons learned throughout the workshop. Overall, this workshop will provide you with the working knowledge of R markdown enabling you to communicate your data efficiently and effectively. 3.1 Agenda TUESDAY, MARCH 3, 2020 (10:00-4:00) 10:00 – 10:15 R Markdown: Introduction 10:15 – 10:45 R and R Studio 10:45 – 11:15 Lesson 1: Project Development 11:15 – 12:00 Lesson 2: Rmd Creation 12:00 – 1:00 LUNCH 1:00 – 1:45 Lesson 3: Basic Syntax 1:45 – 2:30 Lesson 4: YAML Headers 2:30 – 2:40 BREAK 2:40 – 3:50 Lesson 5: Code Chunks 3:50 – 4:00 Closing Remarks WEDNESDAY, MARCH 4, 2020 (9:00-12:00) LIGHT BREAKFAST 9:00 – 9:10 Recap 9:10 – 9:30 Lesson 6: Child Documents 9:30 – 10:20 Lesson 7: Parameterized Reports 10:20 – 10:30 BREAK 10:30 – 11:50 Open Practice Session (bring your own data) 11:50 – 12:00 Closing Remarks 12:00 – 1:00 (LUNCH ON YOUR OWN – CONFERENCE BEGINS @ 1:00) 3.2 Resources Cheat Sheets: https://rstudio.com/resources/cheatsheets/ rmarkdown: https://bookdown.org/yihui/rmarkdown/ https://rmarkdown.rstudio.com/ Lessons: https://rmarkdown.rstudio.com/lesson-1.html parameterized reports: https://www.coursera.org/lecture/reproducible-templates-analysis/adding-parameters-in-a-document-template-6fQwc bookdown: https://bookdown.org/yihui/bookdown/ blogdown: https://bookdown.org/yihui/blogdown/ Leaflet: https://rstudio.github.io/leaflet/ DT: https://rstudio.github.io/DT/ Plotly: https://plot.ly/r/ Dygraphs: https://rstudio.github.io/dygraphs/ "],
["introduction.html", "4 Introduction 4.1 Benefits 4.2 Basic Overview", " 4 Introduction R Markdown: The Definitive Guide: https://bookdown.org/yihui/rmarkdown/ RStudio Lessons: https://rmarkdown.rstudio.com/lesson-1.html Markdown is a markup language for developing and formatting documents. R Markdown is an R-package that allows the user to integrate text, R-code, and R-code output into a well formatted document (e.g., HTML, MS Word, PDF). My recommendation is to create an R Markdown file for every R-project. The intention is to document as much of the project as possible. R Markdown provides a more readable document, with better descriptions of how and why an activity was performed, than a standard R script with a few commented lines. 4.1 Benefits Reproducible: Document steps of an investigation or scientific study reproducibility crisis. Collaborative: Easy to work with others on investigations and scientific studies. Efficient: Generate and update reports automatically (e.g., HTML, MS Word, and PDF). Engaging: Embed interactive figures, maps, and tables in reports (HTML only). Source: https://plotly-book.cpsievert.me/images/gapminder-highlight-animation.gif 4.2 Basic Overview Use markdown syntax, some of which is shown in the table below, to format the document. Source: https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf Once the document is complete (formatted with markdown syntax with integrated R code) the document can be knit (rendered) using the package knitr. Here is a simple example showing the raw R Markdown (Rmd) file before knitting (rendering) and after knitting. The colors on the far left are there to help identify elements pre- and post-knitting. R is not the only language supported by R Markdown. Languages supported by R Markdown include, but are not limited to,… "],
["r-and-r-studio.html", "5 R and R Studio 5.1 What is R? 5.2 RStudio", " 5 R and R Studio 5.1 What is R? R is an open source programming language developed for statistical computing and graphic production. “R can be considered as a different implementation of S”, a language that was developed at Bell Laboratories (https://www.r-project.org/about.html). 5.1.1 Benefits of Using R Reproducibility: Standardized processes (e.g., functions, loops, documentation) When using MS Excel processes are often spread across multiple sheets or calculations are performed haphazardly within a single sheet. In general, this makes it very hard to interpret processes preformed and to reproduce the process. Power: Ability to perform simple and complex data manipulations, iterative processes, and calculations Access to more than 10,000 packages on CRAN New packages are constantly being developed New features are constantly being added to existing packages 5.1.2 R Packages R packages are extensions of base R that provide additional features or provide alternative functionality. Availability CRAN (https://cran.r-project.org/) The Comprehensive R Archive Network (CRAN) FTP and web servers that store R Packages Packages are required to meet certain standards GitHub (https://github.com) These packages are usually under development Contains development versions of many packages available on CRAN Custom (http://r-pkgs.had.co.nz/) You have the ability to create your own packages. 5.2 RStudio Open source integrated development environment (IDE) for R developed by R Studio. Edit scripts Run scripts Navigate files Organize projects Utilize version control (Git and Subversion) View static and interactive graphics And more… 5.2.1 Create a New Script Click on the new document button: Click on R Script: 5.2.2 RStudio Overview Once you have open an existing script or created a new script, following the instructions from the previous section, your RStudio should look similar to the following image. I have added labels to each of the windows. 5.2.2.1 Source Window This window appears when you open an existing R script or create a new R script Create a New Script. You will perform most of your write, edit, save, and execute your code. 5.2.2.2 Console Window Similar to the Source Window, code can also be executed in the console but it is not as easy to edit or save code written in the console window. Generally, I only write and execute code in the console window if I am just testing new code or want to quickly view data. 5.2.2.3 Environment, History, Connections, Build, and Git This window pane includes many features. Here we will only focus on the Environment Tab but I will briefly review the other tabs available. History Tab: view the order in which you have executed code. Connections: connect to databases and show your connections to those databases. Build: will only appear if you are building a custom package because it is used to compile the package and add it to your library. Git: will only appear if you connect your [R Project] to Git (see [GitHub] section). 5.2.2.3.1 Environment Tab Objects created in the Source Window or the Console Window are stored in the global environment. The Environment tab allows you to view the objects stored in the global environment. You can read more about environments in Hadely Wickham’s Advanced R book available for free online (http://adv-r.had.co.nz/Environments.html). In the Source Window example, I loaded the iris data frame into the global environment. This data frame will appear within Environment tab. We can see that this data frame has 150 obs. (rows) and 5 variables (columns). If we click on the blue circle next to iris, we will be provided with a glimpse into the data frame. Below we can see the columns that make up the data frame, the type of data they represent, and the first view values in a given column. The first four columns, Sepal.Length, Sepal.Width, Petal.Length, and Petal.Width, are numeric (num) data type. The last column, Species, is a factor data type. If we click on the view table button. The data frame will open in a tab within the Source Window. Here we can scroll through and view all of the data within the iris data frame. If we want to view a subset of data we can apply a global filter by filtering with… or we can apply column specific filters if we click the filter button. The global environment can be cleared by using the clear button. When your global environment has been cleared the Environment Tab will look like this… 5.2.2.4 Files, Plots, Packages, Help, and Viewer 5.2.2.5 Files Tab Open R Scripts by clicking. View file structure without leaving RStudio. Helpful for finding files to import or to verify a file exported. More beneficial if working in an R Project. 5.2.2.6 Plots Tab View plots created in script. You can manually export from this tab. Generally recommended that you write script to do this (reproducible). 5.2.2.7 Packages Tab View packages installed on your computer. Button to update installed packages. Button to install new packages. 5.2.2.8 Help Tab General Structure: Description, Usage, Arguments, See Also, and Examples. Important to review to understand how the function works. 5.2.2.9 Viewer Tab Similar to the Plots Tab but allows you to view interactive plots. 5.2.3 Shortcuts A list of all RStudio shortcuts can be found here: https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts You can also press Alt+Shift+K within RStudio to pull up a list of shortcuts. Below are my favorite shortcuts: Description Windows…Linux Mac Run Current Line/Selection Ctrl+Enter Command+Enter Insert Code Section Ctrl+Shift+R Command+Shift+R Re-indent Lines Ctrl+I Command+I Reformat Selection Ctrl+Shift+A Command+Shift+A Find and Replace Ctrl+F Command+F Undo Ctrl+Z Command+Z Redo Ctrl+Shift+Z Command+Shift+Z Cut Ctrl+X Command+X Copy Ctrl+C Command+C Paste Ctrl+V Command+V Select All Ctrl+A Command+A Insert Pipe Operator Ctrl+Shift+M Command+Shift+M Insert Code Chunk Ctrl+Alt+I Command+Option+I Restart R Session Ctrl+Shift+F10 Command+Shift+F10 "],
["lesson-1-r-project-development.html", "6 Lesson 1: R Project Development 6.1 Overview 6.2 Create a New R Project 6.3 Navigate Between Projects 6.4 Recommended Workflow 6.5 Your Turn", " 6 Lesson 1: R Project Development 6.1 Overview Easier to access files (relative path) Relative paths help prevent broken paths In general, DO NOT use setwd() Will work if the project folder is moved to a new location on you local machine or moved to a new machine. Designed to easily integrate with version control (GIT) In general, all data, scripts, and output should be stored within the project directory. 6.2 Create a New R Project Create a new R project by clicking on the drop-down menu at the top right of RStudio and selecting “New Project” Select “New Directory” within the “Create Project” window Select “New Project” within the “Project Type” window Enter a project name(below I have given the name “new_project”), the project directory (where the project should live), and select “Create Project” Tip: Create a “project” folder that will act as your parent directory for all R projects. This will make it much easier to navigate to and between projects. A new session specific to your R project will start within RStudio There are a number of ways to tell which project is open… 6.3 Navigate Between Projects Quickly navigate between recently opened R projects by clicking on the drop-down menu at the top right of RStudio and selecting the project of interest. 6.4 Recommended Workflow Set up a GitHub repository. Create an R-project connected to the GitHub repository. Develop R-scripts. Push and pull project changes to and from GitHub. 6.5 Your Turn Open R Studio. Create a new Project. Add an “data” folder and add the example data set to this folder. Create a new R Script (Ctrl + Shift + N) and save the script as “lesson_1.R” to your project root folder. Add the following script and run it (Ctrl + Enter) Notice that the entire file path to CSV of interest (“zms_thesis_metrics.csv”) was not specified just file.path(\"data\", \"zms_thesis_metrics.csv\"). thesis.df &lt;- read.csv(file.path(&quot;data&quot;, &quot;zms_thesis_metrics.csv&quot;), stringsAsFactors = FALSE) head(thesis.df) View thesis.df in the Environment panel How many rows and columns does our data frame have? Click on the drop-down menu (the blue circle to the left of thesis.df). Can you identify the column type (e.g., Character, Numeric, Integer, or Factor) of the columns unique_id, substrate_size_d50, richness, and pct_diptera? What are the first, second, and third unique_id’s represented in the data frame and which richness values are associated with each unique_id? Click on the button to view the data (the small girdded table to the far-right of thesis.df) Filter the data frame to only see data from Onondaga Lake (lake = “onon”) "],
["lesson-2-rmd-creation.html", "7 Lesson 2: Rmd Creation 7.1 Create a New Document 7.2 Compile the Document 7.3 Document Types 7.4 Your Turn", " 7 Lesson 2: Rmd Creation 7.1 Create a New Document Click on the new document button: Click on R Markdown: Provide a “Title:”, select the “Default Output Format:”, and click “OK” A new R Markdown document will appear with some instructions and example text/code. 7.2 Compile the Document To view the html document, you must compile the document using Knit. The easiest way to knit a document is to navigate to and click on the Knit button (it looks like a ball of yarn) in the toolbar above the editor window. If a window appears saying “Install Required Packages” for R Markdown, install the necessary packages for knitting the document. The compiled file will be saved in the same directory as your Rmd file (your R Markdown file). I generally store the R Markdown file(s) in a sub-directory labeled “rmarkdown” within the R-project folder (rproject/markdown), which prevents the project directory from becoming cluttered– this is NOT necessary. You can click on the small triangle to the right of the Knit button to view a drop-down menu of knitting options. Here you have the option to update the document type you want to knit (examples listed below). Knit to HTML Knit to PDF Knit to Word By clicking one of these options your YAML header updates automatically. We will discuss YAML headers in a later section, but in short the YAML header defines some of the formatting options associated with the document, including the output type. You can have multiple document types render at once (e.g., a separate HTML and Word document are created with each knit call). 7.3 Document Types There are multiple document types available which designate how the .Rmd file will be rendered (knit). 7.3.1 HTML Knitting to a Hyper Text Markup Language (HTML) document is the default for R Markdown. Using HTML will enable you to add interactive features to your document. To view HTML documents, simply open them in your internet browser of choice– by default, your machine should open HTML documents in your default browser automatically. 7.3.1.1 R Markdown vs. R Notebook R Markdown documents (html_documents) and R Notebook documents (html_notebook) are very similar; in fact, an R Notebook document is a special type of R Markdown document. The main difference is using R Markdown document (html_documents) you have to knit (render) the entire document each time you want to preview the document, even if you have made a minor change. However, using an R Notebook document (html_notebook) you can view a preview of the final document without rendering the entire document. For all document types you can specify how you want to preview the rendered documents by clicking on the cog in the Source window toolbar to reveal a drop-down menu of options. The recommended setup for use of an R Notebook document would be to specify you want to view the preview in the Viewer pane (i.e., the bottom right pane shared with Files, Plots, Packages, and Help). Then click on the “Preview” button in the Source window toolbar to render a preview of the final document. Keep the Viewer pane open and do not close the preview of the document. Now begin to edit the markdown syntax in the document. Each time you save the document the preview window will render the changes made to the markdown syntax. If you edit R code chunks, you must run the code chunks within the notebook file prior to saving to see the changes in the Viewer window. 7.3.2 PDF You have the ability to knit to Portable Document Format (PDF) but you will not be able include interactive features in the document. Knitting to a PDF requires you to have the program LaTeX installed. You will get the following error message if you try to knit a PDF document without LaTeX installed on your machine: &gt; No LaTeX installation detected (LaTeX is required to create PDF output). You should install a LaTeX distribution for your platform: https://www.latex-project.org/get/ If you are not sure, you may install TinyTeX in R: tinytex::install_tinytex() Otherwise consider MiKTeX on Windows - http://miktex.org MacTeX on macOS - https://tug.org/mactex/ (NOTE: Download with Safari rather than Chrome strongly recommended) Linux: Use system package manager 7.3.3 Word You have the ability to knit to Microsoft Word if you have Microsoft Word installed on your machine. Similarly to PDFs, you will not be able to include interactive features in your Word documents. 7.3.4 Templates 7.3.4.1 Provide Templates There are a number of templates you can install or will come with packages you install, which you can view in the pop-up window that appears when you select that you want to create a new R Markdown file. These templates may give you a jump-start to provide a large portion of the formatting specification to make specific documents. Some example templates from the package pagedown are: Business Card Letter Paged HTML Documents Resume Journal Article Poster Thesis Package Vignette 7.3.4.2 Custom Templates You also have the ability to specify custom templates in your YAML header. We will discuss YAML headers in a later section (Lesson 4: YAML Headers). I have only used this feature for Microsoft Word documents. I created a new document within Microsoft Word and selected all of the formatting options I wanted for my document. I then added the template to the YAML header of my R Markdown document to specify that when the document is knit (rendered) to apply the formatting specifications found in the template Microsoft Word document. 7.3.5 Other Types 7.3.5.1 Presentations You have the ability to create presentation slides using R Markdown. Below are the different format options available. Examples can be found in the following link under the “Presentation” section: https://rmarkdown.rstudio.com/gallery.html ioslides (HTML) Slidy (HTML) Beamer (PDF) Requires LaTeX Microsoft PowerPoint Requires Microsoft PowerPoint I have tried to create presentations with R Markdown on several occasions but I always revert back to using Microsoft PowerPoint. I have not found these slides to be very flexible and seem to only be able to generate simple slides without much content. My recommendation would be to try these slides out if you are making a presentation demonstrating how to use simple R code. 7.3.5.2 Shiny Documents Shiny documents enable you to embed a shiny application into an R Markdown document. This will enable you to insert custom interactive features into your document. The final document will need to be an HTML file. 7.4 Your Turn Create a new HTML .Rmd file. Save the document to your project root folder. Knit the default document produced by RStudio. Using the Knit drop-down menu, specify that you want to create a Word document. This will only be possible if you have Microsoft Word installed on your machine. Bonus: Try creating new R Markdown documents and selecting Presentation, Shiny, and other templates available. Each selection will provide you with an example .Rmd file that you can knit (render) and explore. "],
["lesson-3-basic-syntax.html", "8 Lesson 3: Basic Syntax 8.1 Heading Text 8.2 Plain Text 8.3 Bold and Italicized Text 8.4 Lists 8.5 Link to a Section 8.6 Hyperlink 8.7 Insert Images 8.8 Tabbed Sections 8.9 Your Turn", " 8 Lesson 3: Basic Syntax Source: https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf 8.1 Heading Text Heading text follows one or more hash-sign(s) (#). The number of hash-signs determines the hierarchy of headings. For example, “# Heading 1” would represent the primary heading, “## Heading 2” would represent the secondary heading, “### Heading 3” would represent the tertiary heading, and so forth. 8.2 Plain Text Simply add text below the YAML header. To start a new paragraph, you will need to end your plain text line with two (2) spaces. 8.3 Bold and Italicized Text There are two ways to format your text to be bold or italicized. Bold Surround your text with two (2) asterisks (*) on each side. Surround your text with two (2) underscores (_) on each side. Italicized Surround your text with one (1) asterisk (*) on each side. Surround your text with one (1) underscore (_) on each side. The markdown syntax… which renders to… Bold Text Example Bold Text Example Italicize Text Example Italicize Text Example 8.4 Lists 8.4.1 Unordered Lists Unordered or bulleted lists can be generated by using a single asterisk (*) followed by a space and the plain text intended to represent the bullet. To add another bullet, just hit enter or return and follow the previous steps. To add sub-bullets, insert two spaces and a plus sign (+) followed by a space and the plain text intended to represent the sub-bullet. You can do this at multiple levels; meaning you can add four spaces and a plus sign (+) to insert a sub-sub-bullet and six spaces and a plus sign (+) to add a sub-sub-sub-bullet. The markdown syntax… which renders to… Bullet 1 Bullet 2 Sub-Bullet 1 Sub-Bullet 2 Sub-Sub-Bullet 1 Sub-Sub-Bullet 2 8.4.2 Ordered Lists Follow the steps in Unordered Lists but instead of using asterisk (*) use sequential numbers followed by a period (.)– this cannot be done for sub-bullets. For example, “1.”, “2.”, and “3.”. The markdown syntax… which renders to… Bullet 1 Sub-Bullet 1 Bullet 2 Sub-Bullet 1 Sub-Bullet 2 Sub-Sub-Bullet 1 8.5 Link to a Section You can link to a section within the document by surrounding the name of the section in square brackets. The markdown syntax… [Lesson 3: Basic Syntax] would render to this… Lesson 3: Basic Syntax If you click on the “Lesson 3: Basic Syntax” above, it will jump you to the head of this section. 8.6 Hyperlink You simply need to paste in a full URL into your document and it will automatically be recognized as a hyperlink. For example… https://bookdown.org/yihui/rmarkdown If you want to hide the full link and represent it with text, then surround the text with square brackets followed by the URL in parenthesis. The markdown syntax… [link](https://bookdown.org/yihui/rmarkdown/) would render to this… link. 8.7 Insert Images You can insert images into your document using syntax similar to the hyperlink syntax above. In the code below you can see the file path the to the image. This image will render without a caption ![](images/hex_symbols/rmarkdown.png) You can add a caption for the image in between the square brackets. ![This is my caption for the image.](images/hex_symbols/rmarkdown.png) This is my caption for the image. You can control the size of the image like this… ![This is my caption for the image.](images/hex_symbols/rmarkdown.png){width=200px} This is my caption for the image. You can center the image with HTML like this… 8.8 Tabbed Sections Tabbed sections can be added to section of an HTML documents that will fold all of the subsequent sub-sections into separate tabs. To do this you specify a section header followed by {.tabset}. For example, ## My Section Header {.tabset}. Note this feature is not available for use with bookdown. 8.9 Your Turn Using the .Rmd file created in Lesson 2: Rmd Creation, delete everything below the YAML header. Add the following level-1 headers and knit the document. Introduction Workflow Import Data Preprocessing Study Area Plot Conclusions Add two level-2 headers below the Plot header and knit the document. Scatter Plot LOESS Plot Add plain text below the Introduction header and knit the document. Be sure to include some bold and italicized text. Explain the purpose of the document (e.g., “This document was created during the 2020 NABs R Markdown workshop and will serve as an example workflow for my future use of R Markdown.”) Include the hyperlink to R Markdown: The Definitive Guide (https://bookdown.org/yihui/rmarkdown/). This will be a helpful resource in the future. Add unordered or ordered list below the Workflow header and knit the document. Describe the workflow we have talked about thus far (e.g., create an R project, add folders, create an rmarkdown document, knit the document to render). Add sub-bullets with helpful details. Add the image provided with the data to the Introduction. Make the Plot section tabbed section with {.tabset}. "],
["lesson-4-yaml-headers.html", "9 Lesson 4: YAML Headers 9.1 Title 9.2 Author(s) 9.3 Date 9.4 Table of Contents (TOC) 9.5 Themes 9.6 Code Folding 9.7 output 9.8 Custom Template 9.9 ymlthis 9.10 Your Turn", " 9 Lesson 4: YAML Headers YAML: YAML Ain’t Markup Language A YAML header contains YAML arguments, such as “title”, “author”, and “output”, demarcated by three dashes (—) on either end. 9.1 Title The specified title (title: \"My Title\") will appear at the head of the document with a larger font size than the rest of the document. 9.1.1 Subtitle You can specify subtitle (subtitle: \"My Subtitle\"), which will appear below and in slightly smaller font size than the title of the document. 9.2 Author(s) An author can be specified (author: \"Zachary M. Smith\") and will appear at the head of the document but below the title(s). You can specify multiple authors by separating the names of the authors by a comma (author: \"Zachary M. Smith, John Doe\"). 9.3 Date You can supply a date (date: \"March 3rd, 2020\") that will be added to the head of the document. You can specify a static date (date: \"March 3rd, 2020\") or a dynamic date (see image below) that will update each time you knit (render) the document– we will discuss this further in a subsequent section. 9.4 Table of Contents (TOC) 9.4.1 Floating Table of Contents (TOC) 9.5 Themes You can modify the YAML to specify the .theme of the document, which will change document styling (e.g., font type, color, size) The following link provides examples of some of the available R Markdown themes: https://www.datadreaming.org/post/r-markdown-theme-gallery/ 9.6 Code Folding Code folding refers to the HTML YAML option to hide code chunks by default, but enable the reader to click a button to show the underlying code chunk. 9.6.1 Example without Code Folding 9.6.2 Examples with Code Folding 9.6.2.1 Show 9.6.2.2 Hide 9.7 output The output option allows you to specify the type of document you want to create. This will be auto-populated if you generate the .Rmd file in RStudio by creating a new R Markdown file through the toolbar. You can manually modify the output type, but you must specify valid arguments. Some valid arguments include: html_document html_notebook pdf_document word_document You can click on the small triangle to the right of the Knit button to view a drop-down menu of knitting options. Here you have the option to update the document type you want to knit (examples listed below). Knit to HTML Knit to PDF Knit to Word By clicking one of these options, your YAML header updates automatically. You can have multiple document types render at once (e.g., a separate HTML and Word document are created with each knit call). 9.8 Custom Template You have the ability to specify custom templates in your YAML header. I have only used this feature for Microsoft Word documents. I created a new document within Microsoft Word and selected all of the formatting options I wanted for my document. I then added the template to the YAML header of my R Markdown document to specify that when the document is knit (rendered) to apply the formatting specifications found in the template Microsoft Word document. 9.9 ymlthis ymlthis is an R package intended to make it easier for you to generate YAML headers. The package also includes an interactive addin that provides an intuitive user-interface for generating YAML headers. You can visit the following link to learn more about how to use ymlthis: []https://ymlthis.r-lib.org/ Addins can be accessed by navigating to “Tools” in the RStudio banner, scrolling down to “Addins”, and selecting “Browse Addins.” A pop-up window will appear. If you have ymlthis installed on your machine, you will see the ymlthis addin in the pop-up window table. Once you select the ymlthis addin, you will see a pop-up window like this… 9.10 Your Turn Edit the YAML title and author and knit the document. Specify in the YAML that you want to include a table of contents and knit the document. Specify in the YAML that you want a floating table of contents and knit the document. Specify in the YAML that you want to change the theme to “journal” and knit the document. If you have Microsoft Word installed on your computer, change the YAML output to word_document and the knit the document. Bonus: If you finish early, install ymlthis (install.packages(\"ymlthis\")), navigate to the ymlthis addin, and try to re-create the YAML header from steps 1-4. "],
["lesson-5-code-chunks-and-inline-code.html", "10 Lesson 5: Code Chunks and Inline Code 10.1 Code Chunks 10.2 Inline Code 10.3 Your Turn (Part 1) 10.4 Interactive Features 10.5 Your Turn (Part 2)", " 10 Lesson 5: Code Chunks and Inline Code Up to this point in the workshop we have mostly just written a standard markdown document. However, we want to integrate R code into our document to create reproducible objects, such as figures, tables, and text. 10.1 Code Chunks To insert a code chunk, press Ctrl + Alt + I in the source pane (top left pane in the default settings of RStudio). A code chunk will appear: Inside the code chunk you can write and run R-code. If you print the output of your R-code it will appear below the code chunk in the source pane and the printed output will appear in the final compiled document. This is useful for producing figures and tables. On the far right of the code chunk you will see three buttons. The cog makes it easy to specify code chunk options– discussed below. The middle button will execute all code chunks prior to a given function (Ctrl + Alt + P) The far right button will execute all of the code in a code chunk. 10.1.1 Shortcuts You will want to learn these ASAP. Ctrl + Alt + I - Insert a new code chunk Ctrl + Enter - Run the line of code your cursor is on Ctrl + Alt + R - Run all of the code in the document Ctrl + Alt + P - Run all code chunks above your cursor Ctrl + Shift + F10 - Restart R 10.1.2 Options There are a number of code chunk options that can be specified in the code chunk header to modify how the code chunk is rendered while kniting. These options will not be visible in the rendered document– even if you choose not to hide the code chunks in your rendered document. A comprehensive list of chunk options can be found here: https://yihui.org/knitr/options/ 10.1.2.1 name Best practice is to include a short and unique name within each code chunk header. This will be especially beneficial if you need to troubleshoot an error in your document as you will be able to track the source of the error down by code chunk name. The “name” is not specified as an argument within the header; it is simply separated from the “r” by a space. This is exemplified in the image below on line 9 where “addition” is supplied as the name of the code chunk ({r addition}). 10.1.2.2 echo A logical value (true or false) indicating if the code chunk should be visible in the rendered document. By default the code chunk will be visible upon knitting (echo=true). To hide a specific code chunk set echo to “false” (echo=false). Include the code chunk in the rendered document with echo=true. Exclude the code chunk in the rendered document with echo=false. 10.1.2.3 fig.width, fig.height, and fig.cap The fig.width and fig.height options allow you to control the size of the figure generated from a given code chunk. fig.cap provides the ability to add a caption below the figure generated from a given code chunk. Here is an example of the plot output form a code chunk. Here I have specified fig.width, fig.height, and fig.cap. Notice that plot dimensions have changed from the previous image and a caption has been added to the bottom of the figure. In many cases, you will want the captions to be numbered and you will want this to occur automatically. To this you will first need to install the package bookdown (install.packages(\"bookdown\")). Specify in the YAML header that the output should be “html_document2” from the bookdown package (output: bookdown::html_document2). When you render the document the figures will now be automatically numbered by the order they appear in the document. To cross reference a figure by name in the text use \\@ref(fig:figure_name). Using the example from the figure below, you might write “In \\@ref(fig:IrisScatter) we can see that the species setosoa tend to have shorter sepal lengths than the other two species.” For more information visit https://bookdown.org/yihui/rmarkdown-cookbook/figure-number.html. 10.1.2.4 message and warning Using message=FALSE and/or warning=FALSE will suppress messages and warnings preventing them from printing in the rendered document. Warning: Suppress these messages/warnings at your own risk. Without these messages/warnings you may make it very difficult to track down any issues in your code. An example of messages that are produced with the default message=TRUE. The messages above can be suppressed by setting message=FALSE in the code chunk header. 10.1.2.5 include Code chunk headers with include=FALSE will be ignored when the document is rendered. This can be useful during document development. For example, you may have a code chunk producing an error that prevents you from rendering the rest of your document or you may be questioning the need to keep a given code chunk. include=FALSE will exclude the code from the rendered document without deleting the code entirely from the .Rmd file. The default is include=TRUE. In the example below, include is not altered from the default and therefore all of the code chunks are present in the rendered document. In the example below I added include=FALSE to the header of the second code chunk named “iris-sepal-scatter.” The second code chunk is excluded from the rendered document. 10.1.2.6 Setting Global Options It can be helpful to establish global options to produce a standard format throughout the document. You can set this with the knitr function opts_chunk$set(). For instance, you may want to set a standard dimensions for figures produced by code chunks throughout your document. In the code chunk below, you can see that I set fig.width to 8 and fig.height to 4. knitr::opts_chunk$set(fig.width = 8, fig.height = 4) The options specified in opts_chunk$set() become the default when rendering the document. However, you still have the ability to overwrite these options for specific code chunks. Building off of the previous example, you may find that one out of ten of your plots is not aesthetically pleasing with fig.width = 8 and fig.height = 4. You could specify in the code chunk producing that plot that you want to set fig.width = 6 and fig.height = 6, for example. 10.2 Inline Code Inline code enables you to insert R code into your document to dynamically updated portions of your text. To insert inline code you need to encompass your R code within: . For example, you could write: Which would render to: The mean sepal length found in the iris data set is 5.8433333. I frequently use inline code to make my YAML header date update to the date the document was last rendered. You can reformat the date using the format() function, as depicted in the image below. 10.3 Your Turn (Part 1) The point of this exercise is to get you familiar with code chunks and inline code, NOT to test your R knowledge; therefore, I have included the necessary code below each task. Add a code chunk using Ctrl + Alt + i to import the example data set. read.csv(file = file.path(\"data\", \"zms_thesis_metrics.csv\"), stringsAsFactors = FALSE) Add a name to this code chunk header and all subsequent code chunk headers. Add plain text description above the code chunk. Add the following unordered list describing the contents of the imported data. unique_id (character) unique sample ID lake (character) lake code: caz = Cazenovia lake, onon = Onondaga, and ot = Otisco lat (numeric) latitude of sampling location long (numeric) longitude of sampling location substrate_size_d50 (numeric) median particle size from pebble count conductivity (numeric) specific conductivity (µS/cm) richness (numeric) taxonomic richness shannon (numeric) Shannon-Wiener diversity index values pct_ephemeroptera (numeric) relative abundance of Ephemeroptera taxa pct_amphipoda (numeric) relative abundance of Amphipoda taxa pct_diptera (numeric) relative abundance of Diptera taxa dom_1 (numeric) relative abundance of the most dominant taxon observed in each sample Add a code chunk to import the tidyverse packages. library(tidyverse) Add plain text description above the code chunk. Add message=FALSE to the code chunk header to prevent the package start-up messages Add a code chunk below libary(tidyverse) to preprocess lake name (lake) associated with each sample. thesis.df &lt;- thesis.df %&gt;% mutate(lake = case_when( lake %in% &quot;caz&quot; ~ &quot;Cazenovia&quot;, lake %in% &quot;onon&quot; ~ &quot;Onondaga&quot;, lake %in% &quot;ot&quot; ~ &quot;Otisco&quot;, TRUE ~ &quot;ERROR&quot; ), lake = factor(lake, levels = c(&quot;Onondaga&quot;, &quot;Otisco&quot;, &quot;Cazenovia&quot;))) Add a code chunk just below the YAML header to specify global code chunk options specify fig.width and fig.height in the header specify echo=FALSE to hide this code chunk– your reader does not need to see this knitr::opts_chunk$set() Add a code chunk to generate a scatter plot. Add a caption ggplot(thesis.df, aes(substrate_size_d50, pct_diptera, color = lake)) + geom_point() Add a code chunk generate a boxplot. Modify the figure size Add a caption ggplot(thesis.df, aes(lake, richness, fill = lake)) + geom_boxplot() Add a brief interpretation of the figures into the “Conclusions” section. Bonus: Try using the cog at the top right of the code chunk to update a code chunks options. 10.4 Interactive Features Interactive tables and figures are a great way to make your document more interesting and can be very useful for data exploration. I will warn you that if you use these features too frequently your document will become cluttered and will likely load and run slowly. 10.4.1 DT The DT package enables you and your readers to interact with tables in your document. You can filter and sort the table to view data that you are most interested in exploring or understanding. For more information visit https://rstudio.github.io/DT/ library(DT) ## ## Attaching package: &#39;DT&#39; ## The following objects are masked from &#39;package:shiny&#39;: ## ## dataTableOutput, renderDataTable datatable(iris) 10.4.2 Plotly Plotly makes it easy to create interactive figures. Some of the most useful features are the ability to… rollover figure objects and see a pop-up information related to specific features Zoom-in and zoom-out take a picture of the figure For more information visit: https://plot.ly/ggplot2/ I generally use plotly in conjunction with ggplot2. The plotly function, ggplotly(), makes it simple to convert ggplot2 figures to interactive plotly figures. library(plotly) scatter.plot &lt;- ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point() ggplotly(scatter.plot) 10.4.3 Leaflet Leaflet is a great resource for creating interactive maps with minimal amount of coding. For more information visit: https://rstudio.github.io/leaflet/ library(leaflet) data(&quot;quakes&quot;) leaflet(data = quakes, options = leafletOptions(minZoom = 4, maxZoom = 18)) %&gt;% addTiles() %&gt;% addCircleMarkers(~long, ~lat, fillOpacity = 0.75, stroke = FALSE, popup = paste(&quot;Sample ID:&quot;, quakes$unique_id, &quot;&lt;br/&gt;&quot;, &quot;Magnitude:&quot;, quakes$mag, &quot;&lt;br/&gt;&quot;, &quot;Latitude:&quot;, quakes$lat, &quot;&lt;br/&gt;&quot;, &quot;Longitude:&quot;, quakes$long) ) Another neat feature is the ability to cluster points to better visualize density. You can do this by setting clusterOptions = markerClusterOptions(). library(leaflet) data(&quot;quakes&quot;) leaflet(data = quakes, options = leafletOptions(minZoom = 4, maxZoom = 18)) %&gt;% addTiles() %&gt;% addCircleMarkers(~long, ~lat, fillOpacity = 0.75, stroke = FALSE, popup = paste(&quot;Sample ID:&quot;, quakes$unique_id, &quot;&lt;br/&gt;&quot;, &quot;Magnitude:&quot;, quakes$mag, &quot;&lt;br/&gt;&quot;, &quot;Latitude:&quot;, quakes$lat, &quot;&lt;br/&gt;&quot;, &quot;Longitude:&quot;, quakes$long), clusterOptions = markerClusterOptions() ) 10.5 Your Turn (Part 2) Add a code chunk below the “Preproccessing” header and add the following DT code add this link (https://rstudio.github.io/DT/) to your description above the code chunk to describe where you can find more information on DT library(DT) datatable(thesis.df, options = list(scrollX = TRUE)) Add a code chunk below the “Study Area” header and add the following leaflet code add this link (https://rstudio.github.io/leaflet/) to your description above the code chunk to describe where you can find more information on leaflet library(leaflet) pal &lt;- colorFactor(c(&quot;#619Cff&quot;, &quot;#F8766D&quot;, &quot;#00BA38&quot;), domain = c(&quot;Cazenovia&quot;, &quot;Onondaga&quot;, &quot;Otisco&quot;)) leaflet(data = thesis.df, options = leafletOptions(minZoom = 7, maxZoom = 13)) %&gt;% addTiles() %&gt;% addCircleMarkers(~long, ~lat, fillOpacity = 0.75, fillColor = ~pal(lake), stroke = FALSE, popup = paste(&quot;Sample ID:&quot;, thesis.df$unique_id, &quot;&lt;br/&gt;&quot;, &quot;Lake:&quot;, thesis.df$lake, &quot;&lt;br/&gt;&quot;, &quot;Latitude:&quot;, thesis.df$lat, &quot;&lt;br/&gt;&quot;, &quot;Longitude:&quot;, thesis.df$long) ) Edit the scatter plot code chunk to make the figure interactive with plotly add this link (https://plot.ly/ggplot2/) to your description above the code chunk play around with the interactive plot and the tools provided at the top right of the plot For example, you can zoom in, click on points to get more information, take a snapshot of the current plot, etc. library(plotly) scatter.plot &lt;- ggplot(thesis.df, aes(substrate_size_d50, pct_diptera)) + geom_point(aes(color = lake)) + geom_smooth(method = &quot;lm&quot;) ggplotly(scatter.plot) "],
["lesson-6-child-documents.html", "11 Lesson 6: Child Documents 11.1 Extract and Run R-Code from R Markdown Files 11.2 Your Turn", " 11 Lesson 6: Child Documents In general, I find that a single R Markdown file quickly becomes unwieldy. I recommend breaking the document up into multiple “child” documents and sourcing these child documents in a parent document. My child documents generally represent major subsections of the document. I prefer to store the parent R Markdown file in a folder labeled “markdown” (rproject/markdown) and the child R Markdown files in a sub-directory of my “markdown” folder called “sections” (rproject/markdown/sections). In the parent file, the child files are sourced within the code chunk header using child = ‘sections/example.Rmd’. After sourcing all the child chunks, the parent file can be knit (compiled) like a normal R markdown document. The child documents cannot be run in the parent file. 11.1 Extract and Run R-Code from R Markdown Files The parent file is great for organizing sections of your document, but the child documents cannot be executed within R Studio like a normal code chunk. Without the ability to easily execute the R code within the child documents it can become very difficult to develop new child documents because new child documents often depend on upstream code execution. Imagine you have a parent document that sources child sections which import your data and clean your data. You now want to visualize your data; accordingly, you begin to develop a visualization child document, which depends on information from the upstream child sections. It would be inefficient and inappropriate to perform all the steps in the upstream child sections within the visualization section. Therefore, you need an effective way to execute the upstream child sections while you continue to develop the visualization section. The inefficient way of doing this is to open each child Rmd file in R Studio and execute them manually in the correct sequence. This becomes tedious after you have three or more documents (imagine doing this for 10+ child sections). The most efficient way that I have found to run upstream child sections is to extract the R-code chunks from each Rmd file, save them in a “raw_scripts” folder, and then source/execute the scripts within a regular R script file (.R). 11.1.1 R Code In this section we establish the file path to the folder that contains all the child documents. The names of the child documents are extracted and stored as a vector. The grepl() function is used to retain only the Rmd files stored in the vector. sections.path &lt;- file.path(rprojroot::find_root(&quot;r_in_practice.Rproj&quot;), &quot;markdown&quot;, &quot;sections&quot;) r.files.vec &lt;- list.files(sections.path) r.files.vec &lt;- r.files.vec[grepl(&quot;.Rmd&quot;, r.files.vec)] Next, a file path is specified for the R-scripts that will be extracted from the R Markdown documents; I place these files within a “raw_script/extracted” folder. The map() function from the purrr package is used to loop through each file in the vector (r.files.vec). Within the map() loop, the purl() function from knitr is used to extract the R-code from the R Markdown documents and save the code to the specified folder. extracted.path &lt;- file.path(rprojroot::find_root(&quot;r_in_practice.Rproj&quot;), &quot;markdown&quot;, &quot;raw_scripts&quot;, &quot;extracted&quot;) purrr::map(r.files.vec, function(file.i) { # print(file.i) file.name &lt;- gsub(&quot;.Rmd&quot;, &quot;&quot;, file.i) extracted.file &lt;- paste0(file.name, &quot;.R&quot;) knitr::purl( file.path(sections.path, file.i), file.path(extracted.path, extracted.file) ) }) Finally, create a vector of file names (source.vec) stored in the “raw_script/extracted” folder. You will want to type these out manually (do not use list.files() functions) because in this format you can easily comment out certain scripts and only run the scripts of interest. map() is then used to loop through each specified file in source.vec. Keep in mind that the order of the file names specified in source.vec will determine the order that these files are executed in the map() function; therefore, order the files in source.vec from furthest upstream to furthest downstream. Each iteration of the loop, executes (sources) the specified R-script. source.vec &lt;- c( &quot;introduction.R&quot;, &quot;quick_reference.R&quot;, &quot;installation_updates.R&quot;, &quot;r_project.R&quot;, &quot;version_control.R&quot; ) purrr::map(source.vec, function(source.i) { source(file.path(extracted.path, source.i)) }) Once all the R-scripts extracted from the upstream child R Markdown files have been executed, you can begin or continue work on a new child R Markdown document. I keep all the above code in a single R-script and execute the entire script each time I use this file to make sure all of the files are up-to-date. 11.2 Your Turn Create an R Markdown document for each of the sections, designated by Header level 1s, we have created thus far. save the documents within your project root (where your .Rproj file lives) Copy the Header and the relevant content below the header. Paste the content into the appropriate R Markdown document. Create a parent R Markdown document. create a code chunk for each section. add child = ‘insert-file-name-here.Rmd’ to the header of the appropriate code chunk Knit the document "],
["lesson-7-parameterized-reports.html", "12 Lesson 7: Parameterized Reports 12.1 params 12.2 Knitting 12.3 rmarkdown::render() 12.4 Your Turn", " 12 Lesson 7: Parameterized Reports Parameterized reports enable you to create a report template and generate reports for a subset of the data based on this template. For example, imagine you are tasked with generating 100 one page fact sheets for lakes in your state. The fact sheets will include boilerplate language but for each lake’s fact sheet you will need to update the name of the lake used through out the document, provide a list of metrics relevant to the lake (e.g., lake area, lat/longs, and max depth), and map of the lake. Think about how long it would take you to compile of the necessary components (e.g., lake metrics and lake maps), the amount of time it would take you to manually add these components to each fact sheet, and the struggles you would likely run into with formatting. Now imagine you complete all 100 fact sheets, hand the fact sheets to your boss, and they ask you to change the format of all the maps in the fact sheets. You would likely need to manually re-generate all of the maps and manually replace the maps in each document. Here is a link to a great lecture on creating parameterized reports: https://www.coursera.org/lecture/reproducible-templates-analysis/adding-parameters-in-a-document-template-6fQwc 12.1 params To add a parameter or parameters to your document, add the params: argument below output: html_document. Below params: you can specify any parameter name you want to use and any default value you want to supply. In this example I will be using the iris data set, and therefore I specified that the name of my parameter would be “species” and the default value would be “setosa.” The specified parameter can be used throughout the document with the syntax params$species. params$species will act as a place holder throughout the document until the document is rendered and, in this case, the species is specified; this specified species will be used throughout the document where params$species was acting as a placeholder. In the example below, I use inline code to insert the species name into the title of the document. Therefore, the title will automatically update during rendering depending on the specified parameter. The parameters can also be used to filter the original data frame to a subset of interest. For example, the iris data frame can be filtered to only include the specified species of interest using the code below. data(iris) iris.sub &lt;- iris[iris$Species %in% params$species, ] The parameter can be referenced frequently to update the text in the document or to filter to the data of interest. In the image below, the iris data set will be filtered by the specified parameter to generate iris.sub. iris.sub will be used to calculate the mean value for each flower characteristic. 12.2 Knitting To the knit the document, click on the knit drop-down menu (the small triangle to the right of the Knit button) and select “Knit with Parameters…” A pop-up window will appear specifying the list of available parameters and their default values. These default values can be edited prior to clicking “knit” at the bottom right of the window. The document will then render. 12.3 rmarkdown::render() The rmarkdown function render() can also be used to compile the document. The input specifies the parameterized .Rmd file. The params argument species the parameter values to be used when rendering the document. Note that the value supplied to params must be wrapped by list(). rmarkdown::render(input = &quot;parameterized/param_template.Rmd&quot;, params = list(species = &quot;setosa&quot;)) It would not be efficient to specify each parameter of interest one-by-one. Instead a loop can be written to iteratively generate parameterized documents. Below the function lapply() is used to create the loop. unique(iris$Species) supplies a vector of unique species names (i.e., “setosa”, “versicolor”, and “virginica”) to generate parameterized reports. species.i is specified as a placeholder to represent each unique species in the iris data set; therefore species.i is used to specify what the species parameter should equal and it is used to generate a unique and easy to interpret file name output_file = paste0(species.i, \".HTML\"). lapply(unique(iris$Species), function(species.i) { rmarkdown::render(&quot;parameterized/param_template.Rmd&quot;, params = list(species = species.i), output_file = paste0(species.i, &quot;.HTML&quot;)) }) 12.4 Your Turn Create a new .Rmd file and copy/paste the content of the .Rmd file created in Lesson 5: Code Chunks and Inline Code add params: and specify lake as a parameter with Onondaga as the default (lake: Onondaga) to the YAML header Use inline code to have the YAML title update to include the specified parameter (params$lake) In your introductory paragraph, use inline code to specify that this document is specific to X Lake. Filter thesis.df to only represent the specified lake parameter thesis.df &lt;- thesis.df %&gt;% filter(lake %in% params$lake) Update your conclusion section text to specify that the results are from X Lake and use inline code to specify: the minimum relative abundance of Diptera taxa min(thesis.df$pct_diptera) the maximum relative abundance of Diptera taxa max(thesis.df$pct_diptera) the median richness value observed in the lake median(thesis.df$richness) Render the document using the “Knit with Parameters…” button Use the default parameter Specify a different parameter (e.g., lake = Cazenovia) Bonus: Try to write a loop with lapply() and render() to automate the process to generate a report for each of the three lakes in the data set. "]
]
