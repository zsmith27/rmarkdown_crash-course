[
["index.html", "R Markdown Crash Course 1 Preface", " R Markdown Crash Course Zachary M. Smith 2020-02-29 1 Preface This document was developed for a workshop that I led at the 2020 Northeast Aquatic Biologists (NABs) conference. If you identify any issues or have any questions, please direct these questions to the GitHub issues page associated with the GitHub repository for this document (https://github.com/zsmith27/rmarkdown_crash-course/issues). "],
["preparation-for-workshop.html", "2 Preparation for Workshop 2.1 Install R and R Studio 2.2 Updating Software and Packages", " 2 Preparation for Workshop Please follow the instructions in this section prior to attending the 2020 NABs conference. 2.1 Install R and R Studio Please install R and R Studio by following the links below. Software Link R https://cran.r-project.org/bin/windows/base/ R Studio https://www.rstudio.com/products/rstudio/download/#download 2.2 Updating Software and Packages 2.2.1 R For Windows Operating Systems, run the following code in the RGui, NOT in R Studio. The RGui should be installed when you install R. On my Windows machine, I access RGui by clicking on the R program file– my current file name is “R x64 3.6.2”. Once you have the RGui open, copy and paste the R code below into the R Console window. Make sure R Studio is closed before running this code within the RGui. Hit enter once to install the installr package. Hit enter a second time to run the installer package function updateR() and follow the instructions. This code was copied from: https://www.r-statistics.com/2013/03/updating-r-from-r-on-windows-using-the-installr-package/). # installing/loading the package: if(!require(installr)) { install.packages(&quot;installr&quot;); require(installr) } #load / install+load installr # using the package: updateR() 2.2.2 R Studio Open R Studio Click on “Help” on the toolbar Click on “Check for Updates” Follow instructions 2.2.3 R-Packages Open R Studio Click on “Tools” on the toolbar Click on “Check for Package Updates…” Follow instructions 2.2.3.1 Packages for the Workshop Please run the following code within R Studio to make sure you have all of necessary packages for this workshop installed. Open R Studio Copy the following code package.vec &lt;- c(&quot;tidyverse&quot;, &quot;lubridate&quot;, &quot;knitr&quot;, &quot;rmarkdown&quot;, &quot;markdown&quot;, &quot;bookdown&quot;, &quot;caTools&quot;, &quot;bitops&quot;, &quot;DT&quot;, &quot;leaflet&quot;, &quot;shiny&quot;, &quot;jsonlite&quot;, &quot;plotly&quot;, &quot;data.table&quot;, &quot;rprojroot&quot;, &quot;viridis&quot;) install.packages(package.vec) Paste the code into the Console within R Studio Hit Enter If prompted with “Do you want to restart R prior to installing?”, select “Yes” If prompted again then select “No” The packages should begin to install. This may take some time. "],
["overview.html", "3 Overview 3.1 Agenda", " 3 Overview A large portion of report writing is often consumed by tedious edits and a disjunct workflow. The R-package, R markdown, provides a centralized workflow and reproducible framework, allowing you to focus your time and energy on the content of the report. This workshop offers you hands-on experience developing reports with R markdown and is intended for individuals with at least a basic understanding of the statistical programming language, R. You will learn basic markdown syntax, formatting tips, how to compile your report as several document types (e.g., HTML, MS Word, and PDF), how to automate the production of tables and figures, and how to configure a report template that can be used automate the production of many reports. There is time dedicated at the end of the workshop for you to bring your own data set and begin developing an R markdown document using lessons learned throughout the workshop. Overall, this workshop will provide you with the working knowledge of R markdown enabling you to communicate your data efficiently and effectively. 3.1 Agenda TUESDAY, MARCH 3, 2020 (10:00-4:00) 10:00 – 10:15 R Markdown: Introduction 10:15 – 10:30 R and R Studio 10:30 – 10:45 Lesson 1: Project Development 10:45 – 11:30 Lesson 2: Rmd Creation 10:45 – 11:30 Lesson 2: Basic Syntax 11:30 – 12:00 Lesson 3: YAML Headers 12:00 – 1:00 LUNCH 1:00 – 1:30 Lesson 4: 1:30 – 2:30 Lesson 5: Code Chunks 2:30 – 2:40 BREAK 2:40 – 3:40 Lesson 6: Child Documents 3:40 – 4:00 Closing Remarks WEDNESDAY, MARCH 4, 2020 (9:00-12:00) LIGHT BREAKFAST 9:00 – 9:15 Recap 9:15 – 10:20 Lesson 7: Parameterized Reports 10:20 – 10:30 BREAK 10:30 – 11:50 Open Practice Session (bring your own data) 11:50 – 12:00 Closing Remarks 12:00 – 1:00 (LUNCH ON YOUR OWN – CONFERENCE BEGINS @ 1:00) "],
["introduction.html", "4 Introduction 4.1 Benefits 4.2 Basic Overview", " 4 Introduction R Markdown: The Definitive Guide: https://bookdown.org/yihui/rmarkdown/ RStudio Lessons: https://rmarkdown.rstudio.com/lesson-1.html Markdown is a markup language for developing and formatting documents. R Markdown is an R-package that allows the user to integrate text, R-code, and R-code output into a well formatted document (e.g., HTML, MS Word, PDF). My recommendation is to create an R Markdown file for every R-project. The intention is to document as much of the project as possible. R Markdown provides a more readable document, with better descriptions of how and why an activity was performed, than a standard R script with a few commented lines. 4.1 Benefits Reproducible: Document steps of an investigation or scientific study reproducibility crisis. Collaborative: Easy to work with others on investigations and scientific studies. Efficient: Generate and update reports automatically (e.g., HTML, MS Word, and PDF). Engaging: Embed interactive figures, maps, and tables in reports (HTML only). Source: https://plotly-book.cpsievert.me/images/gapminder-highlight-animation.gif 4.2 Basic Overview Use markdown syntax, some of which is shown in the table below, to format the document. Source: https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf Once the document is complete (formatted with markdown syntax with integrated R code) the document can be knit (rendered) using the package knitr. Here is a simple example showing the raw R Markdown (Rmd) file before knitting (rendering) and after knitting. The colors on the far left are there to help identify elements pre- and post-knitting. R is not the only language supported by R Markdown. The following languages and more can be integrated into an R Markdown file. "],
["r-and-r-studio.html", "5 R and R Studio 5.1 What is R? 5.2 RStudio", " 5 R and R Studio 5.1 What is R? R is an open source programming language developed for statistical computing and graphic production. “R can be considered as a different implementation of S”, a language that was developed at Bell Laboratories (https://www.r-project.org/about.html). 5.1.1 Benefits of Using R Reproducibility: Standardized processes (e.g., functions, loops, documentation) When using MS Excel processes are often spread across multiple sheets or calculations are performed haphazardly within a single sheet. In general, this makes it very hard to interpret processes preformed and to reproduce the process. Power: Ability to perform simple and complex data manipulations, iterative processes, and calculations Access to more than 10,000 packages on CRAN New packages are constantly being developed New features are constantly being added to existing packages 5.1.2 R Packages R packages are extensions of base R that provide additional features or provide alternative functionality. Availability CRAN (https://cran.r-project.org/) The Comprehensive R Archive Network (CRAN) FTP and web servers that store R Packages Packages are required to meet certain standards GitHub (https://github.com) These packages are usually under development Contains development versions of many packages available on CRAN Custom (http://r-pkgs.had.co.nz/) You have the ability to create your own packages. 5.2 RStudio Open source integrated development environment (IDE) for R developed by R Studio. Edit scripts Run scripts Navigate files Organize projects Utilize version control (Git and Subversion) View static and interactive graphics And more… 5.2.1 Create a New Script Click on the new document button: Click on R Script: 5.2.2 RStudio Overview Once you have open an existing script or created a new script, following the instructions from the previous section, your RStudio should look similar to the following image. I have added labels to each of the windows. 5.2.2.1 Source Window This window appears when you open an existing R script or create a new R script Create a New Script. You will perform most of your write, edit, save, and execute your code. 5.2.2.2 Console Window Similar to the Source Window, code can also be executed in the console but it is not as easy to edit or save code written in the console window. Generally, I only write and execute code in the console window if I am just testing new code or want to quickly view data. 5.2.2.3 Environment, History, Connections, Build, and Git This window pane includes many features. Here we will only focus on the Environment Tab but I will briefly review the other tabs available. History Tab: view the order in which you have executed code. Connections: connect to databases and show your connections to those databases. Build: will only appear if you are building a custom package because it is used to compile the package and add it to your library. Git: will only appear if you connect your [R Project] to Git (see [GitHub] section). 5.2.2.3.1 Environment Tab Objects created in the Source Window or the Console Window are stored in the global environment. The Environment tab allows you to view the objects stored in the global environment. You can read more about environments in Hadely Wickham’s Advanced R book available for free online (http://adv-r.had.co.nz/Environments.html). In the Source Window example, I loaded the iris data frame into the global environment. This data frame will appear within Environment tab. We can see that this data frame has 150 obs. (rows) and 5 variables (columns). If we click on the blue circle next to iris, we will be provided with a glimpse into the data frame. Below we can see the columns that make up the data frame, the type of data they represent, and the first view values in a given column. The first four columns, Sepal.Length, Sepal.Width, Petal.Length, and Petal.Width, are numeric (num) data type. The last column, Species, is a factor data type. If we click on the view table button. The data frame will open in a tab within the Source Window. Here we can scroll through and view all of the data within the iris data frame. If we want to view a subset of data we can apply a global filter by filtering with… or we can apply column specific filters if we click the filter button. The global environment can be cleared by using the clear button. When your global environment has been cleared the Environment Tab will look like this… 5.2.2.4 Files, Plots, Packages, Help, and Viewer 5.2.2.5 Files Tab Open R Scripts by clicking. View file structure without leaving RStudio. Helpful for finding files to import or to verify a file exported. More beneficial if working in an R Project. 5.2.2.6 Plots Tab View plots created in script. You can manually export from this tab. Generally recommended that you write script to do this (reproducible). 5.2.2.7 Packages Tab View packages installed on your computer. Button to update installed packages. Button to install new packages. 5.2.2.8 Help Tab General Structure: Description, Usage, Arguments, See Also, and Examples. Important to review to understand how the function works. 5.2.2.9 Viewer Tab Similar to the Plots Tab but allows you to view interactive plots. 5.2.3 Shortcuts A list of all RStudio shortcuts can be found here: https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts You can also press Alt+Shift+K within RStudio to pull up a list of shortcuts. Below are my favorite shortcuts: Description Windows…Linux Mac Run Current Line/Selection Ctrl+Enter Command+Enter Insert Code Section Ctrl+Shift+R Command+Shift+R Re-indent Lines Ctrl+I Command+I Reformat Selection Ctrl+Shift+A Command+Shift+A Find and Replace Ctrl+F Command+F Undo Ctrl+Z Command+Z Redo Ctrl+Shift+Z Command+Shift+Z Cut Ctrl+X Command+X Copy Ctrl+C Command+C Paste Ctrl+V Command+V Select All Ctrl+A Command+A Insert Pipe Operator Ctrl+Shift+M Command+Shift+M Insert Code Chunk Ctrl+Alt+I Command+Option+I Restart R Session Ctrl+Shift+F10 Command+Shift+F10 "],
["lesson-1-r-project-development.html", "6 Lesson 1: R Project Development 6.1 Create a New R Project 6.2 Navigate Between Projects 6.3 Recommended Workflow 6.4 Your Turn", " 6 Lesson 1: R Project Development Overview Easier to access files (relative path) Relative paths help prevent broken paths In general, DO NOT use setwd() Will work if the project folder is moved to a new location on you local machine or moved to a new machine. Designed to easily integrate with version control (GIT) In general, all data, scripts, and output should be stored within the project directory. 6.1 Create a New R Project Create a new R project by clicking on the drop-down menu at the top right of RStudio and selecting “New Project” Select “New Directory” within the “Create Project” window Select “New Project” within the “Project Type” window Enter a project name(below I have given the name “new_project”), the project directory (where the project should live), and select “Create Project” Tip: Create a “project” folder that will act as your parent directory for all R projects. This will make it much easier to navigate to and between projects. A new session specific to your R project will start within RStudio There are a number of ways to tell which project is open… 6.2 Navigate Between Projects Quickly navigate between recently opened R projects by clicking on the drop-down menu at the top right of RStudio and selecting the project of interest. 6.3 Recommended Workflow Set up a GitHub repository. Create an R-project connected to the GitHub repository. Develop R-scripts. Push and pull project changes to and from GitHub. 6.4 Your Turn Open R Studio. Create a new Project. Add an “data” folder and add the example data set to this folder. "],
["lesson-2-rmd-creation.html", "7 Lesson 2: Rmd Creation 7.1 Create a New Document 7.2 Compile the Document 7.3 Your Turn", " 7 Lesson 2: Rmd Creation 7.1 Create a New Document Click on the new document button: Click on R Markdown: Provide a “Title:”, select the “Default Output Format:”, and click “OK” A new R Markdown document will appear with some instructions and example text/code. 7.2 Compile the Document To view the html document, you must compile the document using Knit. The easiest way to knit a document is to navigate to and click on the Knit button (it looks like a ball of yarn) in the toolbar above the editor window. If a window appears saying “Install Required Packages” for R Markdown, install the necessary packages for knitting the document. The compiled file will be saved in the same directory as your Rmd file (your R Markdown file). I store the R Markdown file(s) in a sub-directory labeled “rmarkdown” within the R-project folder (rproject/markdown), which prevents the project directory from becoming cluttered. 7.3 Your Turn Create a new HTML Rmd file. Save the document to the “rmarkdown/sections” folder. Knit the default document produced by RStudio. "],
["lesson-3-basic-syntax.html", "8 Lesson 3: Basic Syntax 8.1 Non-Code Related Syntax", " 8 Lesson 3: Basic Syntax Source: https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf 8.1 Non-Code Related Syntax 8.1.1 Heading Text Heading text follows one or more hash-sign(s) (#). The number of hash-signs determines the hierarchy of headings. For example, “# Heading 1” would represent the primary heading, “## Heading 2” would represent the secondary heading, “###Heading 3” would represent the tertiary heading, and so forth. 8.1.2 Plain Text Simply add text below the YAML header. To start a new paragraph, you will need to end your plain text line with two (2) spaces. 8.1.3 Bold and Italicized Text There are two ways to format your text to be bold or italicized. Bold Surround your text with two (2) asterisks (*) on each side. Surround your text with two (2) underscores (_) on each side. Italicized Surround your text with one (1) asterisk (*) on each side. Surround your text with one (1) underscore (_) on each side. 8.1.4 Lists 8.1.4.1 Unordered Lists Unordered or bulleted lists can be generated by using a single asterisk (*) followed by a space and the plain text intended to represent the bullet. To add another bullet, just hit enter or return and follow the previous steps. To add sub-bullets, insert two spaces and a plus sign (+) followed by a space and the plain text intended to represent the sub-bullet. You can do this at multiple levels; meaning you can add four spaces and a plus sign (+) to insert a sub-sub-bullet and six spaces and a plus sign (+) to add a sub-sub-sub-bullet. Bullet 1 Bullet 2 Sub-Bullet 1 Sub-Bullet 2 Sub-Sub-Bullet 1 Sub-Sub-Bullet 1 8.1.4.2 Ordered Lists Follow the steps in Unordered Lists but instead of using asterisk (*) use sequential numbers followed by a period (.)– this cannot be done for sub-bullets. For example, “1.”, “2.”, and “3.”. Bullet 1 Sub-Bullet 1 Bullet 2 +. Sub-Bullet 1 Sub-Bullet 2 Sub-Sub-Bullet 1 8.1.5 Your Turn Delete everything below the YAML header. Add the following level-1 headers and knit the document. Introduction Workflow Import Data Preprocessing Study Area Plot Conclusions Add two level-2 headers below the Plot header and knit the document. Scatter Plot LOESS Plot Add plain text below the Introduction header and knit the document. Be sure to include some bold and italicized text. Explain the purpose of the document (e.g., “This document was created during the 2020 NABs R Markdown workshop and will serve as an example workflow for my future use of R Markdown.”) Add unordered or ordered list below the Workflow header and knit the document. Describe the workflow we have talked about thus far (e.g., create an R project, add folders, create an rmarkdown document, knit the document to render). Add sub-bullets with helpful details. "],
["lesson-4-yaml-headers.html", "9 Lesson 4: YAML Headers 9.1 Standard 9.2 Table of Contents (TOC) 9.3 Themes 9.4 Code Folding 9.5 ymlthis 9.6 Your Turn", " 9 Lesson 4: YAML Headers YAML: YAML Ain’t Markup Language 9.1 Standard 9.2 Table of Contents (TOC) 9.2.1 Floating Table of Contents (TOC) 9.3 Themes You can modify the YAML to specify the .theme of the document, which will change document styling (e.g., font type, color, size) The following link provides examples of some of the available R Markdown themes: https://www.datadreaming.org/post/r-markdown-theme-gallery/ 9.4 Code Folding Code folding refers to the HTML YAML option to hide code chunks by default, but enable the reader to click a button to show the underlying code chunk. 9.4.1 Example without Code Folding 9.4.2 Examples with Code Folding 9.4.2.1 Show 9.4.2.2 Hide 9.5 ymlthis ymlthis is an R package intended to make it easier for you to generate YAML headers. The package also includes an interactive addin that provides an intuitive user-interface for generating YAML headers. You can visit the following link to learn more about how to use ymlthis: []https://ymlthis.r-lib.org/ 9.6 Your Turn Edit the YAML title and author and knit the document. Specify in the YAML that you want to include a table of contents and knit the document. Specify in the YAML that you want a floating table of contents and knit the document. Specify in the YAML that you want to change the theme to “journal” and knit the document. Bonus: If you finish early, install ymlthis (install.packages(\"ymlthis\")), navigate to the ymlthis addin, and try to re-create the YAML header from steps 1-4. "],
["lesson-4-code-chunks-and-inline-code.html", "10 Lesson 4: Code Chunks and Inline Code 10.1 Code Chunks 10.2 Inline Code 10.3 Your Turn", " 10 Lesson 4: Code Chunks and Inline Code Up to this point in the workshop we have mostly just written a standard markdown document. However, we want to integrate R code into our document to create reproducible objects, such as figures, tables, and text. This integration will make will make it easier to reproduce the document. 10.1 Code Chunks To insert a code chunk, press Ctrl + Alt + i in the source pane (top left pane in the default settings of Studio). A code chunk will appear: Inside the code chunk you can write and run R-code. If you print the output of your R-code it will appear below the code chunk in the source pane and the printed output will appear in the final compiled document. This is useful for producing figures and tables. 10.1.1 Options There are a number of code chunk options that can be specified in the code chunk header to modify how the code chunk is rendered while kniting. These options will not be visible in the rendered document– even if you choose not to hide the code chunks in your rendered document. A comprehensive list of chunk options can be found here: https://yihui.org/knitr/options/ 10.1.1.1 name Best practice is to include a short and unique name within each code chunk header. This will be especially beneficial if you need to troubleshoot an error in your document as you will be able to track the source of the error down by code chunk name. The “name” is not specified as an argument within the header; it is simply separated from the “r” by a space. This is exemplified in the image below on line 9 where “addition” is supplied as the name of the code chunk ({r addition}). 10.1.1.2 echo A logical value (true or false) indicating if the code chunk should be visible in the rendered document. By default the code chunk will be visible upon knitting (echo=true). To hide a specific code chunk set echo to “false” (echo=false). Include the code chunk in the rendered document with echo=true. Exclude the code chunk in the rendered document with echo=false. 10.1.1.3 fig.width, fig.height, and fig.cap The fig.width and fig.height options allow you to control the size of the figure generated from a given code chunk. fig.cap provides the ability to add a caption below the figure generated from a given code chunk. Here is an example of the plot output form a code chunk. Here I have specified fig.width, fig.height, and fig.cap. Notice that plot dimensions have changed from the previous image and a caption has been added to the bottom of the figure. In many cases, you will want the captions to be numbered and you will want this to occur automatically. To this you will first need to install the package bookdown (install.packages(\"bookdown\")). Specify in the YAML header that the output should be “html_document2” from the bookdown package (output: bookdown::html_document2). When you render the document the figures will now be automatically numbered by the order they appear in the document. To cross reference a figure by name in the text use \\@ref(fig:figure_name). Using the example from the figure below, you might write “In \\@ref(fig:IrisScatter) we can see that the species setosoa tend to have shorter sepal lengths than the other two species.” For more information visit https://bookdown.org/yihui/rmarkdown-cookbook/figure-number.html. 10.1.1.4 message and warning Using message=FALSE and/or warning=FALSE will suppress messages and warnings preventing them from printing in the rendered document. Warning: Suppress these messages/warnings at your own risk. Without these messages/warnings you may make it very difficult to track down any issues in your code. An example of messages that are produced with the default message=TRUE. The messages above can be suppressed by setting message=FALSE in the code chunk header. 10.1.1.5 include Code chunk headers with include=FALSE will be ignored when the document is rendered. This can be useful during document development. For example, you may have a code chunk producing an error that prevents you from rendering the rest of your document or you may be questioning the need to keep a given code chunk. include=FALSE will exclude the code from the rendered document without deleting the code entirely from the .Rmd file. The default is include=TRUE. In the example below, include is not altered from the default and therefore all of the code chunks are present in the rendered document. In the example below I added include=FALSE to the header of the second code chunk named “iris-sepal-scatter.” The second code chunk is excluded from the rendered document. 10.1.1.6 Setting Global Options It can be helpful to establish global options to produce a standard format throughout the document. You can set this with the knitr function opts_chunk$set(). For instance, you may want to set a standard dimensions for figures produced by code chunks throughout your document. In the code chunk below, you can see that I set fig.width to 8 and fig.height to 4. knitr::opts_chunk$set(fig.width = 8, fig.height = 4) The options specified in opts_chunk$set() become the default when rendering the document. However, you still have the ability to overwrite these options for specific code chunks. Building off of the previous example, you may find that one out of ten of your plots is not aesthetically pleasing with fig.width = 8 and fig.height = 4. You could specify in the code chunk producing that plot that you want to set fig.width = 6 and fig.height = 6, for example. 10.2 Inline Code Inline code enables you to insert R code into your document to dynamically updated portions of your text. To insert inline code you need to encompass your R code within: . For example, you could write: Which would render to: The mean sepal length found in the iris data set is 5.8433333. I frequently use inline code to make my YAML header date update to the date the document was last rendered. You can reformat the date using the format() function, as depicted in the image below. 10.3 Your Turn The point of this exercise is to get you familiar with code chunks and inline code, NOT to test your R knowledge; therefore, I have included the necessary code below each task. Add a code chunk using Ctrl + Alt + i to import the example data set. read.csv(file = file.path(\"data\", \"zms_thesis_metrics.csv\"), stringsAsFactors = FALSE) Add a name to this code chunk header and all subsequent code chunk headers. Add plain text description above the code chunk. Add the following unordered list describing the contents of the imported data. unique_id (character) unique sample ID lake (character) lake code: caz = Cazenovia lake, onon = Onondaga, and ot = Otisco lat (numeric) latitude of sampling location long (numeric) longitude of sampling location substrate_size_d50 (numeric) median particle size from pebble count conductivity (numeric) specific conductivity (µS/cm) richness (numeric) taxonomic richness shannon (numeric) Shannon-Wiener diversity index values pct_ephemeroptera (numeric) relative abundance of Ephemeroptera taxa pct_amphipoda (numeric) relative abundance of Amphipoda taxa pct_diptera (numeric) relative abundance of Diptera taxa dom_1 (numeric) relative abundance of the most dominant taxon observed in each sample Add a code chunk to import the tidyverse packages. library(tidyverse) Add plain text description above the code chunk. Add message=FALSE to the code chunk header to prevent the package start-up messages Add a code chunk below libary(tidyverse) to preprocess lake name (lake) associated with each sample. thesis.df &lt;- thesis.df %&gt;% mutate(lake = case_when( lake %in% &quot;caz&quot; ~ &quot;Cazenovia&quot;, lake %in% &quot;onon&quot; ~ &quot;Onondaga&quot;, lake %in% &quot;ot&quot; ~ &quot;Otisco&quot;, TRUE ~ &quot;ERROR&quot; ), lake = factor(lake, levels = c(&quot;Onondaga&quot;, &quot;Otisco&quot;, &quot;Cazenovia&quot;))) Add a code chunk just below the YAML header to specify global code chunk options specify fig.width and fig.height in the header specify echo=FALSE to hide this code chunk– your reader does not need to see this knitr::opts_chunk$set() Add a code chunk below the “Preproccessing” header and add the following DT code add this link (https://rstudio.github.io/DT/) to your description above the code chunk to describe where you can find more information on DT library(DT) datatable(thesis.df, options = list(scrollX = TRUE)) Add a code chunk below the “Study Area” header and add the following leaflet code add this link (https://rstudio.github.io/leaflet/) to your description above the code chunk to describe where you can find more information on leaflet library(leaflet) pal &lt;- colorFactor(c(&quot;#619Cff&quot;, &quot;#F8766D&quot;, &quot;#00BA38&quot;), domain = c(&quot;Cazenovia&quot;, &quot;Onondaga&quot;, &quot;Otisco&quot;)) leaflet(data = thesis.df, options = leafletOptions(minZoom = 7, maxZoom = 13)) %&gt;% addTiles() %&gt;% addCircleMarkers(~long, ~lat, fillOpacity = 0.75, fillColor = ~pal(lake), stroke = FALSE, popup = paste(&quot;Sample ID:&quot;, thesis.df$unique_id, &quot;&lt;br/&gt;&quot;, &quot;Lake:&quot;, thesis.df$lake, &quot;&lt;br/&gt;&quot;, &quot;Latitude:&quot;, thesis.df$lat, &quot;&lt;br/&gt;&quot;, &quot;Longitude:&quot;, thesis.df$long) ) Add a code chunk to generate a scatter plot. Add a caption ggplot(thesis.df, aes(substrate_size_d50, pct_diptera, color = lake)) + geom_point() Add a code chunk generate a boxplot. Modify the figure size Add a caption ggplot(thesis.df, aes(lake, richness, fill = lake)) + geom_boxplot() Add a brief interpretation of the figures into the “Conclusions” section. Bonus: If you have enough time, edit the scatter plot code chunk to make the figure interactive with plotly add this link (https://plot.ly/ggplot2/) to your description above the code chunk play around with the interactive plot and the tools provided at the top right of the plot For example, you can zoom in, click on points to get more information, take a snapshot of the current plot, etc. "],
["lesson-5-child-documents.html", "11 Lesson 5: Child Documents 11.1 Extract and Run R-Code from R Markdown Files 11.2 Your Turn", " 11 Lesson 5: Child Documents In general, I find that a single R Markdown file quickly becomes unwieldy. I recommend breaking the document up into multiple “child” documents and sourcing these child documents in a parent document. My child documents generally represent major subsections of the document. I prefer to store the parent R Markdown file in a folder labeled “markdown” (rproject/markdown) and the child R Markdown files in a sub-directory of my “markdown” folder called “sections” (rproject/markdown/sections). In the parent file, the child files are sourced within the code chunk header using child = ‘sections/example.Rmd’. After sourcing all the child chunks, the parent file can be knit (compiled) like a normal R markdown document. The child documents cannot be run in the parent file. 11.1 Extract and Run R-Code from R Markdown Files The parent file is great for organizing sections of your document, but the child documents cannot be executed within R Studio like a normal code chunk. Without the ability to easily execute the R code within the child documents it can become very difficult to develop new child documents because new child documents often depend on upstream code execution. Imagine you have a parent document that sources child sections which import your data and clean your data. You now want to visualize your data; accordingly, you begin to develop a visualization child document, which depends on information from the upstream child sections. It would be inefficient and inappropriate to perform all the steps in the upstream child sections within the visualization section. Therefore, you need an effective way to execute the upstream child sections while you continue to develop the visualization section. The inefficient way of doing this is to open each child Rmd file in R Studio and execute them manually in the correct sequence. This becomes tedious after you have three or more documents (imagine doing this for 10+ child sections). The most efficient way that I have found to run upstream child sections is to extract the R-code chunks from each Rmd file, save them in a “raw_scripts” folder, and then source/execute the scripts within a regular R script file (.R). 11.1.1 R Code In this section we establish the file path to the folder that contains all the child documents. The names of the child documents are extracted and stored as a vector. The grepl() function is used to retain only the Rmd files stored in the vector. sections.path &lt;- file.path(rprojroot::find_root(&quot;r_in_practice.Rproj&quot;), &quot;markdown&quot;, &quot;sections&quot;) r.files.vec &lt;- list.files(sections.path) r.files.vec &lt;- r.files.vec[grepl(&quot;.Rmd&quot;, r.files.vec)] Next, a file path is specified for the R-scripts that will be extracted from the R Markdown documents; I place these files within a “raw_script/extracted” folder. The map() function from the purrr package is used to loop through each file in the vector (r.files.vec). Within the map() loop, the purl() function from knitr is used to extract the R-code from the R Markdown documents and save the code to the specified folder. extracted.path &lt;- file.path(rprojroot::find_root(&quot;r_in_practice.Rproj&quot;), &quot;markdown&quot;, &quot;raw_scripts&quot;, &quot;extracted&quot;) purrr::map(r.files.vec, function(file.i) { # print(file.i) file.name &lt;- gsub(&quot;.Rmd&quot;, &quot;&quot;, file.i) extracted.file &lt;- paste0(file.name, &quot;.R&quot;) knitr::purl( file.path(sections.path, file.i), file.path(extracted.path, extracted.file) ) }) Finally, create a vector of file names (source.vec) stored in the “raw_script/extracted” folder. You will want to type these out manually (do not use list.files() functions) because in this format you can easily comment out certain scripts and only run the scripts of interest. map() is then used to loop through each specified file in source.vec. Keep in mind that the order of the file names specified in source.vec will determine the order that these files are executed in the map() function; therefore, order the files in source.vec from furthest upstream to furthest downstream. Each iteration of the loop, executes (sources) the specified R-script. source.vec &lt;- c( &quot;introduction.R&quot;, &quot;quick_reference.R&quot;, &quot;installation_updates.R&quot;, &quot;r_project.R&quot;, &quot;version_control.R&quot; ) purrr::map(source.vec, function(source.i) { source(file.path(extracted.path, source.i)) }) Once all the R-scripts extracted from the upstream child R Markdown files have been executed, you can begin or continue work on a new child R Markdown document. I keep all the above code in a single R-script and execute the entire script each time I use this file to make sure all of the files are up-to-date. 11.2 Your Turn Create an R Markdown document for each of the sections, designated by Header level 1s, we have created thus far. save the documents within your project root (where your .Rproj file lives) Copy the Header and the relevant content below the header. Paste the content into the appropriate R Markdown document. Create a parent R Markdown document. create a code chunk for each section. add child = ‘insert-file-name-here.Rmd’ to the header of the appropriate code chunk Knit the document "],
["lesson-6-parameterized-reports.html", "12 Lesson 6: Parameterized Reports", " 12 Lesson 6: Parameterized Reports Parameterized reports enable you to create a report template and generate reports for a subset of the data based on this template. For example, imagine you are tasked with generating 100 one page fact sheets for lakes in your state. The fact sheets will include boilerplate language but for each lake’s fact sheet you will need to update the name of the lake used through out the document, provide a list of metrics relevant to the lake (e.g., lake area, lat/longs, and max depth), and map of the lake. Think about how long it would take you to compile of the necessary components (e.g., lake metrics and lake maps), the amount of time it would take you to manually add these components to each fact sheet, and the struggles you would likely run into with formatting. Now imagine you complete all 100 fact sheets, hand the fact sheets to your boss, and they ask you to change the format of all the maps in the fact sheets. In my opinion this would be devastating; you would likely need to manually re-generate all of the maps and manually replace the maps in each document. Here is a link to a great lecture on creating parameterized reports: https://www.coursera.org/lecture/reproducible-templates-analysis/adding-parameters-in-a-document-template-6fQwc "]
]
