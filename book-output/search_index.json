[
["index.html", "R Markdown Crash Course 1 Preface", " R Markdown Crash Course Zachary M. Smith 2020-02-11 1 Preface This document was developed for a workshop that I led at the 2020 Northeast Aquatic Biologists (NABs) conference. If you identify any issues or have any questions, please direct these questions to the GitHub issues page associated with the GitHub repository for this document (https://github.com/zsmith27/rmarkdown_crash-course/issues). "],
["preparation-for-workshop.html", "2 Preparation for Workshop 2.1 Install R and R Studio 2.2 Updating Software and Packages", " 2 Preparation for Workshop Please follow the instructions in this section prior to attending the 2020 NABs conference. 2.1 Install R and R Studio Please install R and R Studio by following the links below. Software Link R https://cran.r-project.org/bin/windows/base/ R Studio https://www.rstudio.com/products/rstudio/download/#download 2.2 Updating Software and Packages 2.2.1 R For Windows Operating Systems, run the following code in the RGui, NOT in R Studio. The RGui should be installed when you install R. On my Windows machine, I access RGui by clicking on the R program file– my current file name is “R x64 3.6.2”. Once you have the RGui open, copy and paste the R code below into the R Console window. Make sure R Studio is closed before running this code within the RGui. Hit enter once to install the installr package. Hit enter a second time to run the installer package function updateR() and follow the instructions. This code was copied from: https://www.r-statistics.com/2013/03/updating-r-from-r-on-windows-using-the-installr-package/). # installing/loading the package: if(!require(installr)) { install.packages(&quot;installr&quot;); require(installr) } #load / install+load installr # using the package: updateR() 2.2.2 R Studio Open R Studio Click on “Help” on the toolbar Click on “Check for Updates” Follow instructions 2.2.3 R-Packages Open R Studio Click on “Tools” on the toolbar Click on “Check for Package Updates…” Follow instructions 2.2.3.1 Packages for the Workshop Please run the following code within R Studio to make sure you have all of necessary packages for this workshop installed. Open R Studio Copy the following code package.vec &lt;- c(&quot;tidyverse&quot;, &quot;lubridate&quot;, &quot;knitr&quot;, &quot;rmarkdown&quot;, &quot;markdown&quot;, &quot;bookdown&quot;, &quot;caTools&quot;, &quot;bitops&quot;, &quot;DT&quot;, &quot;leaflet&quot;, &quot;shiny&quot;, &quot;jsonlite&quot;, &quot;plotly&quot;, &quot;data.table&quot;, &quot;rprojroot&quot;, &quot;viridis&quot;) install.packages(package.vec) Paste the code into the Console within R Studio Hit Enter If prompted with “Do you want to restart R prior to installing?”, select “Yes” If prompted again then select “No” The packages should begin to install. This may take some time. "],
["overview.html", "3 Overview 3.1 AGENDA", " 3 Overview A large portion of report writing is often consumed by tedious edits and a disjunct workflow. The R-package, R markdown, provides a centralized workflow and reproducible framework, allowing you to focus your time and energy on the content of the report. This workshop offers you hands-on experience developing reports with R markdown and is intended for individuals with at least a basic understanding of the statistical programming language, R. You will learn basic markdown syntax, formatting tips, how to compile your report as several document types (e.g., HTML, MS Word, and PDF), how to automate the production of tables and figures, and how to configure a report template that can be used automate the production of many reports. There is time dedicated at the end of the workshop for you to bring your own dataset and begin developing an R markdown document using lessons learned throughout the workshop. Overall, this workshop will provide you with the working knowledge of R markdown enabling you to communicate your data efficiently and effectively. 3.1 AGENDA TUESDAY, MARCH 3, 2020 (10:00-4:00) 10:00 – 10:15 R Markdown: Introduction 10:15 – 10:30 R and R Studio 10:30 – 10:45 Project Development 10:45 – 11:30 Lesson 1: Basic Syntax 11:30 – 12:00 Lesson 2: YAML Headers 12:00 – 1:00 LUNCH 1:00 – 1:30 Lesson 3: Document Types 1:30 – 2:30 Lesson 4: Code Chunks 2:30 – 2:40 BREAK 2:40 – 3:40 Lesson 5: Child Documents 3:40 – 4:00 Closing Remarks WEDNESDAY, MARCH 4, 2020 (9:00-12:00) LIGHT BREAKFAST 9:00 – 9:15 Recap 9:15 – 10:20 Lesson 6: Parameterized Reports 10:20 – 10:30 BREAK 10:30 – 11:50 Open Practice Session (bring your own data) 11:50 – 12:00 Closing Remarks 12:00 – 1:00 (LUNCH ON YOUR OWN – CONFERENCE BEGINS @ 1:00) "],
["introduction.html", "4 Introduction 4.1 Benefits 4.2 Basic Overview", " 4 Introduction R Markdown: The Definitive Guide: https://bookdown.org/yihui/rmarkdown/ RStudio Lessons: https://rmarkdown.rstudio.com/lesson-1.html Markdown is a markup language for developing and formating documents. R Markdown is an R-package that allows the user to integrate text, R-code, and R-code output into a well formatted document (e.g., HTML, MS Word, PDF). My recommendation is to create an R Markdown file for every R-project. The intention is to document as much of the project as possible. R Markdown provides a more readable document, with better descriptions of how and why an activity was performed, than a standard R script with a few commented lines. 4.1 Benefits Reproducible: Document steps of an investigation or scientific study reproducibility crisis. Collaborative: Easy to work with others on investigations and scientific studies. Efficient: Generate and update reports automatically (e.g., HTML, MS Word, and PDF). Engaging: Embed interactive figures, maps, and tables in reports (HTML only). Source: https://plotly-book.cpsievert.me/images/gapminder-highlight-animation.gif 4.2 Basic Overview Use markdown syntax, some of which is shown in the table below, to format the document. Source: https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf Once the document is complete (formated with markdown syntax with integrated R code) the document can be knit (rendered) using the package knitr. Here is a simple example showing the raw R Markdown (Rmd) file before knitting (rendering) and after knitting. The colors on the far left are ther to help identify elements pre- and post-knitting. R is not the only language supported by R Markdown. The following languages and more can be integrated into an R Markdown file. "],
["r-and-r-studio.html", "5 R and R Studio 5.1 What is R? 5.2 RStudio", " 5 R and R Studio 5.1 What is R? R is an open source programming language developed for statistical computing and graphic production. “R can be considered as a differenct implementation of S”, a language that was developed at Bell Laboratories (https://www.r-project.org/about.html). 5.1.1 Benefits of Using R Reproducibility: Standardized processes (e.g., functions, loops, documentation) When using MS Excel processes are often spread across multiple sheets or calculations are performed haphazardly within a single sheet. In general, this makes it very hard to interpret processes performmed and to reproduce the process. Power: Ability to perform simple and complex data manipulations, iterative processes, and calculations Access to more than 10,000 packages on CRAN New packages are constantly being developed New features are contsantly being added to existing packages 5.1.2 R Packages R packages are extensions of base R that provide additional features or provide alternative functionality. Availability CRAN (https://cran.r-project.org/) The Comprehensive R Archive Network (CRAN) FTP and web servers that store R Packages Packages are rwquired to meet certain standards GitHub (https://github.com) These packages are usually under development Contains development versions of many packages available on CRAN Custom (http://r-pkgs.had.co.nz/) You have the ability to create your own packages. 5.2 RStudio Open source integrated development environment (IDE) for R developed by R Studio. Edit scripts Run scripts Navigate files Organize projects Utilize version control (Git and Subversion) View static and interactive graphics And more… 5.2.1 Create a New Script Click on the new document buttion: Click on R Script: 5.2.2 RStudio Overview Once you have open an existing script or created a new script, following the instructions from the previous section, your RStudio should look similar to the following image. I have added labels to each of the windows. 5.2.2.1 Source Window This window appears when you open an exisiting R script or create a new R script Create a New Script. You will perform most of your write, edit, save, and execute your code. 5.2.2.2 Console Window Similar to the Source Window, code can also be executed in the console but it is not as easy to edit or save code written in the console window. Generally, I only write and execute code in the console window if I am just testing new code or want to quickly view data. 5.2.2.3 Environment, History, Connections, Build, and Git This window pane includes many features. Here we will only focus on the Environment Tab but I will briefly review the other tabs available. History Tab: view the order in which you have executed code. Connections: connect to databases and show your connections to those databases. Build: will only appear if you are building a custom package becuase it is used to compile the package and add it to your library. Git: will only appear if you connect your [R Project] to Git (see [GitHub] section). 5.2.2.3.1 Environment Tab Objects created in the Source Window or the Console Window are stored in the global environment. The Environment tab allows you to view the objects stored in the global environment. You can read more about environments in Hadely Wickham’s Advanced R book available for free online (http://adv-r.had.co.nz/Environments.html). In the Source Window example, I loaded the iris data frame into the global environment. This data frame will appear within Environment tab. We can see that this data frame has 150 obs. (rows) and 5 variables (columns). If we click on the blue circle next to iris, we will be provided with a glimpse into the data frame. Below we can see the columns that make up the data frame, the type of data they represent, and the first view values in a given column. The first four columns, Sepal.Length, Sepal.Width, Petal.Length, and Petal.Width, are numeric (num) data type. The last column, Species, is a factor data type. If we click on the view table button. The data frame will open in a tab within the Source Window. Here we can scroll through and view all of the data within the iris data frame. If we want to view a subset of data we can apply a global filter by filtering with… or we can apply column specific fileters if we click the filter button. The global environment can be cleared by using the clear button. When your global environment has been cleared the Environment Tab will look like this… 5.2.2.4 Files, Plots, Packages, Help, and Viewer 5.2.2.5 Files Tab Open R Scripts by clicking. View file structure without leaving RStudio. Helpful for finding files to import or to verify a file exported. More beneficial if working in an R Project. 5.2.2.6 Plots Tab View plots created in script. You can manually export from this tab. Generally recommended that you write script to do this (reproducible). 5.2.2.7 Packages Tab View packages installed on your computer. Button to update installed packages. Button to install new packages. 5.2.2.8 Help Tab General Structure: Description, Usage, Arguments, See Also, and Examples. Important to review to understand how the function works. 5.2.2.9 Viewer Tab Similar to the Plots Tab but allows you to view interactive plots. 5.2.3 Shortcuts A list of all RStudio shortcuts can be found here: https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts You can also press Alt+Shift+K within RStudio to pull up a list of shortcuts. Below are my favorite shortcuts: Description Windows…Linux Mac Run Current Line/Selection Ctrl+Enter Command+Enter Insert Code Section Ctrl+Shift+R Command+Shift+R Re-indent Lines Ctrl+I Command+I Reformat Selection Ctrl+Shift+A Command+Shift+A Find and Replace Ctrl+F Command+F Undo Ctrl+Z Command+Z Redo Ctrl+Shift+Z Command+Shift+Z Cut Ctrl+X Command+X Copy Ctrl+C Command+C Paste Ctrl+V Command+V Select All Ctrl+A Command+A Insert Pipe Operator Ctrl+Shift+M Command+Shift+M Insert Code Chunk Ctrl+Alt+I Command+Option+I Restart R Session Ctrl+Shift+F10 Command+Shift+F10 "],
["r-project-development.html", "6 R Project Development 6.1 Create a New R Project 6.2 Navigate Between Packages 6.3 Recommended Workflow", " 6 R Project Development Overview Easier to access files (relative path) Relative paths help prevent broken paths In general, DO NOT use setwd() Will work if the project folder is moved to a new location on you local machine or moved to a new machine. Designed to easily integrate with version control (GIT) In general, all data, scripts, and output should be stored within the project directory. 6.1 Create a New R Project Create a new R project by clicking on the dropdown menu at the top right of RStudio and selecting “New Project” Select “New Directory” within the “Create Project” window Select “New Project” within the “Project Type” window Enter a project name(below I have given the name “new_project”), the project directory (where the project should live), and select “Create Project” Tip: Create a “project” folder that will act as your parent directory for all R projects. This will make it much easier to navigate to and between projects. A new session specific to your R project will start within RStudio There are a number of ways to tell which project is open… 6.2 Navigate Between Packages Quickly navigate between recently opened R projects by clicking on the dropdown menu at the top right of RStudio and selecting the project of interest. 6.3 Recommended Workflow Set up a GitHub repository. Create an R-project connected to the GitHub repository. Develop R-scripts. Push and pull project changes to and from GitHub. "],
["lesson-1-basic-syntax.html", "7 Lesson 1: Basic Syntax", " 7 Lesson 1: Basic Syntax "],
["lesson-2-yaml-headers.html", "8 Lesson 2: YAML Headers", " 8 Lesson 2: YAML Headers "],
["lesson-3-doument-types.html", "9 Lesson 3: Doument Types", " 9 Lesson 3: Doument Types "],
["lesson-4-code-chunks.html", "10 Lesson 4: Code Chunks", " 10 Lesson 4: Code Chunks "],
["lesson-5-child-documents.html", "11 Lesson 5: Child Documents", " 11 Lesson 5: Child Documents "],
["lesson-6-parameterized-reports.html", "12 Lesson 6: Parameterized Reports 12.1 Create a New Document 12.2 Editing 12.3 Compile the Document 12.4 File Management 12.5 Child Documents 12.6 Parameterized Reports", " 12 Lesson 6: Parameterized Reports 12.1 Create a New Document Click on the new document buttion: Click on R Markdown: Provide a “Title:”, select the “Defualt Output Format:”, and click “OK” A new R Markdown document will appear with some instructions and example text/code. Delete everything after the YAML header: --- title: &quot;Untitled&quot; author: &quot;Zachary M. Smith&quot; date: &quot;September 23, 2018&quot; output: html_document --- 12.2 Editing Again, your best resource for learning how to use R Markdown will be the R Markdown website (https://rmarkdown.rstudio.com/lesson-1.html), but I will describe some of the general features here. 12.2.1 YAML Header YAML: YAML Ain’t Markup Language 12.2.1.1 Standard 12.2.1.2 Table of Contents (TOC) 12.2.1.3 Floating Table of Contents (TOC) 12.2.2 Heading Text Heading text follows one or more hash-sign(s) (#). The number of hash-signs determines the hierarchy of headings. For example, “# Heading 1” would represent the primary heading, “## Heading 2” would represent the secondary heading, “###Heading 3” would represent the tertiary heading, and so forth. 12.2.3 Plain Text Simply add text below the YAML header. 12.2.4 Insert Code Chunks To insert a code chunk, press Ctrl + Alt + i in the source pane (top left pane in the default settings of Studio). A code chunk will appear: Inside the code chunk you can write and run R-code. If you print the output of your R-code it will appear below the code chunk in the source pane and the printed output will appear in the final compiled document. This is useful for producing figures and tables. 12.3 Compile the Document To view the html document, you must compile the document using Knit. Follow these steps to Knit the document: Find and click the Knit button (it looks like a ball of yarn) in the toolbar above the editor window. If a window appears saying “Install Required Packages” for R Markdown, install the necessary packages for knitting the document. The compiled file will be saved in the same directory as your Rmd file (your R Markdown file). 12.4 File Management I store the R Markdown file(s) in a sub-directory labeled “markdown” within the R-project folder (rproject/markdown). 12.5 Child Documents In general, I find that a single R Markdown file quickly becomes unwieldy. I recommend breaking the document up into multiple “child” documents and sourcing these child documents in a parent document. My child documents generally represent major subsections of the document. I store the parent R Markdown file in the “markdown” folder (rproject/markdown) and the child R Markdown files in a sub-directory of my “markdown” folder called “sections” (rproject/markdown/sections). In the parent file, the child files are sourced within the code chunk header using “child = ‘sections/example.Rmd’. After sourcing all the child chunks, the parent file can be knit (compiled) like a normal R markdown document. The child documents cannot be run in the parent file. 12.5.1 Extract and Run R-Code from R Markdown Files The parent file is great for organizing sections of your document, but the child documents cannot be executed within R Studio like a normal code chunk. Without the ability to easily execute the R code within the child documents it can become very difficult to develop new child documents because new child documents often depend on upstream code execution. Imagine you have a parent document that sources child sections which import your data and clean your data. You now want to visualize your data; accordingly, you begin to develop a visualization child document, which depends on information from the upstream child sections. It would be inefficient and inappropriate to perform all the steps in the upstream child sections within the visualization section. Therefore, you need an effective way to execute the upstream child sections while you continue to develop the visualization section. The inefficient way of doing this is to open each child Rmd file in R Studio and execute them manually in the correct sequence. This becomes tedious after you have three or more documents (imagine doing this for 10+ child sections). The most efficient way that I have found to run upstream child sections is to extract the R-code chunks from each Rmd file, save them in a “raw_scripts” folder, and then source/execute the scripts within a regular R script file (.R). 12.5.1.1 R Code In this section we establish the file path to the folder that contains all the child documents. The names of the child documents are extracted and stored as a vector. The grepl() function is used to retain only the Rmd files stored in the vector. sections.path &lt;- file.path(rprojroot::find_root(&quot;r_in_practice.Rproj&quot;), &quot;markdown&quot;, &quot;sections&quot;) r.files.vec &lt;- list.files(sections.path) r.files.vec &lt;- r.files.vec[grepl(&quot;.Rmd&quot;, r.files.vec)] Next, a file path is specified for the R-scripts that will be extracted from the R Markdown documents; I place these files within a “raw_script/extracted” folder. The map() function from the purrr package is used to loop through each file in the vector (r.files.vec). Within the map() loop, the purl() function from knitr is used to extract the R-code from the R Markdown documents and save the code to the specified folder. extracted.path &lt;- file.path(rprojroot::find_root(&quot;r_in_practice.Rproj&quot;), &quot;markdown&quot;, &quot;raw_scripts&quot;, &quot;extracted&quot;) purrr::map(r.files.vec, function(file.i) { # print(file.i) file.name &lt;- gsub(&quot;.Rmd&quot;, &quot;&quot;, file.i) extracted.file &lt;- paste0(file.name, &quot;.R&quot;) knitr::purl( file.path(sections.path, file.i), file.path(extracted.path, extracted.file) ) }) Finally, create a vector of file names (source.vec) stored in the “raw_script/extracted” folder. You will want to type these out manually (do not use list.files() functions) because in this format you can easily comment out certain scripts and only run the scripts of interest. The map() is then used to loop through each specified file in source.vec. Keep in mind that the order of the file names specified in source.vec will determine the order that these files are executed in the map() function; therefore, order the files in source.vec from furthest upstream to furthest downstream. Each iteration of the loop, executes (sources) the specified R-script. source.vec &lt;- c( &quot;introduction.R&quot;, &quot;quick_reference.R&quot;, &quot;installation_updates.R&quot;, &quot;r_project.R&quot;, &quot;version_control.R&quot; ) purrr::map(source.vec, function(source.i) { source(file.path(extracted.path, source.i)) }) Once all the R-scripts extracted from the upstream child R Markdown files have been executed, you can begin or continue work on a new child R Markdown document. I keep all the above code in a single R-script and execute the entire script each time I use this file to make sure all of the files are up-to-date. 12.6 Parameterized Reports https://www.coursera.org/lecture/reproducible-templates-analysis/adding-parameters-in-a-document-template-6fQwc "]
]
